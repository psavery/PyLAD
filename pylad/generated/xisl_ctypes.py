# This file was auto-generated by generate_ctypes_wrappers.py
# It is an attempt to define signatures automatically on all XISL functions.
# The signatures are only really needed as a safety feature (type checking
# will be performed when we call them via ctypes). As long as we are certain
# that the types match, we are actually able to skip using this script.
import ctypes
import sys

_int_types = (ctypes.c_int16, ctypes.c_int32)
if hasattr(ctypes, "c_int64"):
    # Some builds of ctypes apparently do not have ctypes.c_int64
    # defined; it's a pretty good bet that these builds do not
    # have 64-bit pointers.
    _int_types += (ctypes.c_int64,)
for t in _int_types:
    if ctypes.sizeof(t) == ctypes.sizeof(ctypes.c_size_t):
        c_ptrdiff_t = t
del t
del _int_types


def POINTER(obj):
    p = ctypes.POINTER(obj)

    # Convert None to a real NULL pointer to work around bugs
    # in how ctypes handles None on 64-bit platforms
    if not isinstance(p.from_param, classmethod):

        def from_param(cls, x):
            if x is None:
                return cls()
            else:
                return x

        p.from_param = classmethod(from_param)

    return p


class UserString:
    def __init__(self, seq):
        if isinstance(seq, bytes):
            self.data = seq
        elif isinstance(seq, UserString):
            self.data = seq.data[:]
        else:
            self.data = str(seq).encode()

    def __bytes__(self):
        return self.data

    def __str__(self):
        return self.data.decode()

    def __repr__(self):
        return repr(self.data)

    def __int__(self):
        return int(self.data.decode())

    def __long__(self):
        return int(self.data.decode())

    def __float__(self):
        return float(self.data.decode())

    def __complex__(self):
        return complex(self.data.decode())

    def __hash__(self):
        return hash(self.data)

    def __le__(self, string):
        if isinstance(string, UserString):
            return self.data <= string.data
        else:
            return self.data <= string

    def __lt__(self, string):
        if isinstance(string, UserString):
            return self.data < string.data
        else:
            return self.data < string

    def __ge__(self, string):
        if isinstance(string, UserString):
            return self.data >= string.data
        else:
            return self.data >= string

    def __gt__(self, string):
        if isinstance(string, UserString):
            return self.data > string.data
        else:
            return self.data > string

    def __eq__(self, string):
        if isinstance(string, UserString):
            return self.data == string.data
        else:
            return self.data == string

    def __ne__(self, string):
        if isinstance(string, UserString):
            return self.data != string.data
        else:
            return self.data != string

    def __contains__(self, char):
        return char in self.data

    def __len__(self):
        return len(self.data)

    def __getitem__(self, index):
        return self.__class__(self.data[index])

    def __getslice__(self, start, end):
        start = max(start, 0)
        end = max(end, 0)
        return self.__class__(self.data[start:end])

    def __add__(self, other):
        if isinstance(other, UserString):
            return self.__class__(self.data + other.data)
        elif isinstance(other, bytes):
            return self.__class__(self.data + other)
        else:
            return self.__class__(self.data + str(other).encode())

    def __radd__(self, other):
        if isinstance(other, bytes):
            return self.__class__(other + self.data)
        else:
            return self.__class__(str(other).encode() + self.data)

    def __mul__(self, n):
        return self.__class__(self.data * n)

    __rmul__ = __mul__

    def __mod__(self, args):
        return self.__class__(self.data % args)

    # the following methods are defined in alphabetical order:
    def capitalize(self):
        return self.__class__(self.data.capitalize())

    def center(self, width, *args):
        return self.__class__(self.data.center(width, *args))

    def count(self, sub, start=0, end=sys.maxsize):
        return self.data.count(sub, start, end)

    def decode(self, encoding=None, errors=None):  # XXX improve this?
        if encoding:
            if errors:
                return self.__class__(self.data.decode(encoding, errors))
            else:
                return self.__class__(self.data.decode(encoding))
        else:
            return self.__class__(self.data.decode())

    def encode(self, encoding=None, errors=None):  # XXX improve this?
        if encoding:
            if errors:
                return self.__class__(self.data.encode(encoding, errors))
            else:
                return self.__class__(self.data.encode(encoding))
        else:
            return self.__class__(self.data.encode())

    def endswith(self, suffix, start=0, end=sys.maxsize):
        return self.data.endswith(suffix, start, end)

    def expandtabs(self, tabsize=8):
        return self.__class__(self.data.expandtabs(tabsize))

    def find(self, sub, start=0, end=sys.maxsize):
        return self.data.find(sub, start, end)

    def index(self, sub, start=0, end=sys.maxsize):
        return self.data.index(sub, start, end)

    def isalpha(self):
        return self.data.isalpha()

    def isalnum(self):
        return self.data.isalnum()

    def isdecimal(self):
        return self.data.isdecimal()

    def isdigit(self):
        return self.data.isdigit()

    def islower(self):
        return self.data.islower()

    def isnumeric(self):
        return self.data.isnumeric()

    def isspace(self):
        return self.data.isspace()

    def istitle(self):
        return self.data.istitle()

    def isupper(self):
        return self.data.isupper()

    def join(self, seq):
        return self.data.join(seq)

    def ljust(self, width, *args):
        return self.__class__(self.data.ljust(width, *args))

    def lower(self):
        return self.__class__(self.data.lower())

    def lstrip(self, chars=None):
        return self.__class__(self.data.lstrip(chars))

    def partition(self, sep):
        return self.data.partition(sep)

    def replace(self, old, new, maxsplit=-1):
        return self.__class__(self.data.replace(old, new, maxsplit))

    def rfind(self, sub, start=0, end=sys.maxsize):
        return self.data.rfind(sub, start, end)

    def rindex(self, sub, start=0, end=sys.maxsize):
        return self.data.rindex(sub, start, end)

    def rjust(self, width, *args):
        return self.__class__(self.data.rjust(width, *args))

    def rpartition(self, sep):
        return self.data.rpartition(sep)

    def rstrip(self, chars=None):
        return self.__class__(self.data.rstrip(chars))

    def split(self, sep=None, maxsplit=-1):
        return self.data.split(sep, maxsplit)

    def rsplit(self, sep=None, maxsplit=-1):
        return self.data.rsplit(sep, maxsplit)

    def splitlines(self, keepends=0):
        return self.data.splitlines(keepends)

    def startswith(self, prefix, start=0, end=sys.maxsize):
        return self.data.startswith(prefix, start, end)

    def strip(self, chars=None):
        return self.__class__(self.data.strip(chars))

    def swapcase(self):
        return self.__class__(self.data.swapcase())

    def title(self):
        return self.__class__(self.data.title())

    def translate(self, *args):
        return self.__class__(self.data.translate(*args))

    def upper(self):
        return self.__class__(self.data.upper())

    def zfill(self, width):
        return self.__class__(self.data.zfill(width))


class MutableString(UserString):
    """mutable string objects

    Python strings are immutable objects.  This has the advantage, that
    strings may be used as dictionary keys.  If this property isn't needed
    and you insist on changing string values in place instead, you may cheat
    and use MutableString.

    But the purpose of this class is an educational one: to prevent
    people from inventing their own mutable string class derived
    from UserString and than forget thereby to remove (override) the
    __hash__ method inherited from UserString.  This would lead to
    errors that would be very hard to track down.

    A faster and better solution is to rewrite your program using lists."""

    def __init__(self, string=""):
        self.data = string

    def __hash__(self):
        raise TypeError("unhashable type (it is mutable)")

    def __setitem__(self, index, sub):
        if index < 0:
            index += len(self.data)
        if index < 0 or index >= len(self.data):
            raise IndexError
        self.data = self.data[:index] + sub + self.data[index + 1 :]

    def __delitem__(self, index):
        if index < 0:
            index += len(self.data)
        if index < 0 or index >= len(self.data):
            raise IndexError
        self.data = self.data[:index] + self.data[index + 1 :]

    def __setslice__(self, start, end, sub):
        start = max(start, 0)
        end = max(end, 0)
        if isinstance(sub, UserString):
            self.data = self.data[:start] + sub.data + self.data[end:]
        elif isinstance(sub, bytes):
            self.data = self.data[:start] + sub + self.data[end:]
        else:
            self.data = self.data[:start] + str(sub).encode() + self.data[end:]

    def __delslice__(self, start, end):
        start = max(start, 0)
        end = max(end, 0)
        self.data = self.data[:start] + self.data[end:]

    def immutable(self):
        return UserString(self.data)

    def __iadd__(self, other):
        if isinstance(other, UserString):
            self.data += other.data
        elif isinstance(other, bytes):
            self.data += other
        else:
            self.data += str(other).encode()
        return self

    def __imul__(self, n):
        self.data *= n
        return self


class String(MutableString, ctypes.Union):

    _fields_ = [
        ("raw", ctypes.POINTER(ctypes.c_char)),
        ("data", ctypes.c_char_p),
    ]

    def __init__(self, obj=b""):
        if isinstance(obj, (bytes, UserString)):
            self.data = bytes(obj)
        else:
            self.raw = obj

    def __len__(self):
        return self.data and len(self.data) or 0

    def from_param(cls, obj):
        # Convert None or 0
        if obj is None or obj == 0:
            return cls(ctypes.POINTER(ctypes.c_char)())

        # Convert from String
        elif isinstance(obj, String):
            return obj

        # Convert from bytes
        elif isinstance(obj, bytes):
            return cls(obj)

        # Convert from str
        elif isinstance(obj, str):
            return cls(obj.encode())

        # Convert from c_char_p
        elif isinstance(obj, ctypes.c_char_p):
            return obj

        # Convert from POINTER(ctypes.c_char)
        elif isinstance(obj, ctypes.POINTER(ctypes.c_char)):
            return obj

        # Convert from raw pointer
        elif isinstance(obj, int):
            return cls(ctypes.cast(obj, ctypes.POINTER(ctypes.c_char)))

        # Convert from ctypes.c_char array
        elif isinstance(obj, ctypes.c_char * len(obj)):
            return obj

        # Convert from object
        else:
            return String.from_param(obj._as_parameter_)

    from_param = classmethod(from_param)


def ReturnString(obj, func=None, arguments=None):
    return String.from_param(obj)


# As of ctypes 1.0, ctypes does not support custom error-checking
# functions on callbacks, nor does it support custom datatypes on
# callbacks, so we must ensure that all callbacks return
# primitive datatypes.
#
# Non-primitive return values wrapped with UNCHECKED won't be
# typechecked, and will be converted to ctypes.c_void_p.
def UNCHECKED(type):
    if (
        hasattr(type, "_type_")
        and isinstance(type._type_, str)
        and type._type_ != "P"
    ):
        return type
    else:
        return ctypes.c_void_p


# ctypes doesn't have direct support for variadic functions, so we have to write
# our own wrapper class
class _variadic_function(object):
    def __init__(self, func, restype, argtypes, errcheck):
        self.func = func
        self.func.restype = restype
        self.argtypes = argtypes
        if errcheck:
            self.func.errcheck = errcheck

    def _as_parameter_(self):
        # So we can pass this variadic function as a function pointer
        return self.func

    def __call__(self, *args):
        fixed_args = []
        i = 0
        for argtype in self.argtypes:
            # Typecheck what we can
            fixed_args.append(argtype.from_param(args[i]))
            i += 1
        return self.func(*fixed_args + list(args[i:]))


def ord_if_char(value):
    """
    Simple helper used for casts to simple builtin types:  if the argument is a
    string type, it will be converted to it's ordinal value.

    This function will raise an exception if the argument is string with more
    than one characters.
    """
    return (
        ord(value)
        if (isinstance(value, bytes) or isinstance(value, str))
        else value
    )


# Import ctypes types manually (update if needed)
from ctypes import (
    WINFUNCTYPE,
    c_char,
    c_double,
    c_int,
    c_long,
    c_size_t,
    c_ubyte,
    c_uint,
    c_ulong,
    c_ushort,
    Structure,
)

CFUNCTYPE=WINFUNCTYPE

def add_xisl_ctypes(lib):
    # Define a few types manually (update if needed)
    BOOL = c_int
    WORD = c_ushort
    DWORD = c_uint
    CHAR = c_char
    BYTE = c_ubyte
    HANDLE = POINTER(None)
    HWND = HANDLE
    UINT = c_uint
    ACQDESCPOS = POINTER(None)
    HACQDESC = HANDLE
    DEX_RETURN = c_uint

    lib.Acquisition_Global_Init.argtypes = [XIS_Init_Flags]
    lib.Acquisition_Global_Init.restype = UINT

    lib.Acquisition_Global_Cleanup.argtypes = []
    lib.Acquisition_Global_Cleanup.restype = UINT

    lib.Acquisition_Init.argtypes = [
        POINTER(HACQDESC),
        DWORD,
        c_int,
        BOOL,
        UINT,
        UINT,
        UINT,
        BOOL,
        BOOL,
    ]
    lib.Acquisition_Init.restype = UINT

    lib.Acquisition_SetCallbacksAndMessages.argtypes = [
        HACQDESC,
        HWND,
        UINT,
        UINT,
        CFUNCTYPE(None, ctypes.c_void_p),
        ctypes.c_void_p,
    ]
    lib.Acquisition_SetCallbacksAndMessages.restype = UINT

    lib.Acquisition_EnumSensors.argtypes = [POINTER(UINT), BOOL, BOOL]
    lib.Acquisition_EnumSensors.restype = UINT

    lib.Acquisition_GetNextSensor.argtypes = [
        POINTER(ACQDESCPOS),
        POINTER(HACQDESC),
    ]
    lib.Acquisition_GetNextSensor.restype = UINT

    lib.Acquisition_GetCommChannel.argtypes = [
        HACQDESC,
        POINTER(UINT),
        POINTER(c_int),
    ]
    lib.Acquisition_GetCommChannel.restype = UINT

    lib.Acquisition_DefineDestBuffers.argtypes = [
        HACQDESC,
        POINTER(c_ushort),
        UINT,
        UINT,
        UINT,
    ]
    lib.Acquisition_DefineDestBuffers.restype = UINT

    lib.Acquisition_Acquire_Image.argtypes = [
        HACQDESC,
        UINT,
        UINT,
        UINT,
        POINTER(c_ushort),
        POINTER(DWORD),
        POINTER(DWORD),
    ]
    lib.Acquisition_Acquire_Image.restype = UINT

    lib.Acquisition_Acquire_Image_Ex.argtypes = [
        HACQDESC,
        UINT,
        UINT,
        UINT,
        POINTER(c_ushort),
        UINT,
        POINTER(c_ushort),
        POINTER(c_ushort),
        POINTER(DWORD),
        POINTER(DWORD),
    ]
    lib.Acquisition_Acquire_Image_Ex.restype = UINT

    lib.Acquisition_Abort.argtypes = [HACQDESC]
    lib.Acquisition_Abort.restype = UINT

    lib.Acquisition_SetFPGACameraMode.argtypes = [HACQDESC, FPGAType, BOOL]
    lib.Acquisition_SetFPGACameraMode.restype = UINT

    lib.Acquisition_SetCameraMode.argtypes = [HACQDESC, UINT]
    lib.Acquisition_SetCameraMode.restype = UINT

    lib.Acquisition_Acquire_OffsetImage.argtypes = [
        HACQDESC,
        POINTER(c_ushort),
        UINT,
        UINT,
        UINT,
    ]
    lib.Acquisition_Acquire_OffsetImage.restype = UINT

    lib.Acquisition_Acquire_OffsetImage_Ex.argtypes = [
        HACQDESC,
        POINTER(c_ushort),
        UINT,
        UINT,
        UINT,
        UINT,
    ]
    lib.Acquisition_Acquire_OffsetImage_Ex.restype = UINT

    lib.Acquisition_Acquire_GainImage.argtypes = [
        HACQDESC,
        POINTER(WORD),
        POINTER(DWORD),
        UINT,
        UINT,
        UINT,
    ]
    lib.Acquisition_Acquire_GainImage.restype = UINT

    lib.Acquisition_Acquire_GainImage_Ex.argtypes = [
        HACQDESC,
        POINTER(WORD),
        POINTER(DWORD),
        UINT,
        UINT,
        UINT,
        UINT,
    ]
    lib.Acquisition_Acquire_GainImage_Ex.restype = UINT

    lib.Acquisition_CreateGainMap.argtypes = [
        POINTER(WORD),
        POINTER(WORD),
        c_int,
        c_int,
    ]
    lib.Acquisition_CreateGainMap.restype = UINT

    lib.Acquisition_CreatePixelMap.argtypes = [
        POINTER(WORD),
        c_int,
        c_int,
        POINTER(c_int),
        POINTER(c_int),
    ]
    lib.Acquisition_CreatePixelMap.restype = UINT

    lib.Acquisition_DoOffsetCorrection.argtypes = [
        POINTER(WORD),
        POINTER(WORD),
        POINTER(WORD),
        c_int,
    ]
    lib.Acquisition_DoOffsetCorrection.restype = UINT

    lib.Acquisition_DoOffsetGainCorrection.argtypes = [
        POINTER(WORD),
        POINTER(WORD),
        POINTER(WORD),
        POINTER(DWORD),
        c_int,
    ]
    lib.Acquisition_DoOffsetGainCorrection.restype = UINT

    lib.Acquisition_DoOffsetGainCorrection_Ex.argtypes = [
        POINTER(WORD),
        POINTER(WORD),
        POINTER(WORD),
        POINTER(WORD),
        POINTER(WORD),
        c_int,
        c_int,
    ]
    lib.Acquisition_DoOffsetGainCorrection_Ex.restype = UINT

    lib.Acquisition_DoOffsetCorrection32.argtypes = [
        POINTER(c_ulong),
        POINTER(c_ulong),
        POINTER(c_ulong),
        c_int,
    ]
    lib.Acquisition_DoOffsetCorrection32.restype = UINT

    lib.Acquisition_DoOffsetGainCorrection32.argtypes = [
        POINTER(c_ulong),
        POINTER(c_ulong),
        POINTER(c_ulong),
        POINTER(c_ulong),
        c_int,
    ]
    lib.Acquisition_DoOffsetGainCorrection32.restype = UINT

    lib.Acquisition_DoOffsetGainCorrection_Ex32.argtypes = [
        POINTER(c_ulong),
        POINTER(c_ulong),
        POINTER(c_ulong),
        POINTER(c_ulong),
        POINTER(c_ulong),
        c_int,
        c_int,
    ]
    lib.Acquisition_DoOffsetGainCorrection_Ex32.restype = UINT

    lib.Acquisition_CreateGainMap32.argtypes = [
        POINTER(c_ulong),
        POINTER(c_ulong),
        c_int,
        c_int,
    ]
    lib.Acquisition_CreateGainMap32.restype = UINT

    lib.Acquisition_DoPixelCorrection.argtypes = [
        POINTER(WORD),
        POINTER(c_int),
    ]
    lib.Acquisition_DoPixelCorrection.restype = UINT

    lib.Acquisition_IsAcquiringData.argtypes = [HACQDESC]
    lib.Acquisition_IsAcquiringData.restype = UINT

    lib.Acquisition_Close.argtypes = [HACQDESC]
    lib.Acquisition_Close.restype = UINT

    lib.Acquisition_CloseAll.argtypes = []
    lib.Acquisition_CloseAll.restype = UINT

    lib.Acquisition_SetReady.argtypes = [HACQDESC, BOOL]
    lib.Acquisition_SetReady.restype = UINT

    lib.Acquisition_GetReady.argtypes = [HACQDESC]
    lib.Acquisition_GetReady.restype = UINT

    lib.Acquisition_GetErrorCode.argtypes = [
        HACQDESC,
        POINTER(DWORD),
        POINTER(DWORD),
    ]
    lib.Acquisition_GetErrorCode.restype = UINT

    lib.Acquisition_GetConfiguration.argtypes = [
        HACQDESC,
        POINTER(UINT),
        POINTER(UINT),
        POINTER(UINT),
        POINTER(UINT),
        POINTER(UINT),
        POINTER(BOOL),
        POINTER(DWORD),
        POINTER(DWORD),
        POINTER(DWORD),
        POINTER(DWORD),
    ]
    lib.Acquisition_GetConfiguration.restype = UINT

    lib.Acquisition_GetIntTimes.argtypes = [
        HACQDESC,
        POINTER(c_double),
        POINTER(c_int),
    ]
    lib.Acquisition_GetIntTimes.restype = UINT

    lib.Acquisition_GetWinHandle.argtypes = [HACQDESC, POINTER(HWND)]
    lib.Acquisition_GetWinHandle.restype = UINT

    lib.Acquisition_GetActFrame.argtypes = [
        HACQDESC,
        POINTER(DWORD),
        POINTER(DWORD),
    ]
    lib.Acquisition_GetActFrame.restype = UINT

    lib.Acquisition_SetAcqData.argtypes = [HACQDESC, POINTER(None)]
    lib.Acquisition_SetAcqData.restype = UINT

    lib.Acquisition_GetAcqData.argtypes = [HACQDESC, POINTER(POINTER(None))]
    lib.Acquisition_GetAcqData.restype = UINT

    lib.Acquisition_GetHwHeaderInfo.argtypes = [
        HACQDESC,
        POINTER(CHwHeaderInfo),
    ]
    lib.Acquisition_GetHwHeaderInfo.restype = UINT

    lib.Acquisition_SetFrameSync.argtypes = [HACQDESC]
    lib.Acquisition_SetFrameSync.restype = UINT

    lib.Acquisition_SetFrameSyncMode.argtypes = [HACQDESC, DWORD]
    lib.Acquisition_SetFrameSyncMode.restype = UINT

    lib.Acquisition_SetTimerSync.argtypes = [HACQDESC, POINTER(DWORD)]
    lib.Acquisition_SetTimerSync.restype = UINT

    lib.Acquisition_AbortCurrentFrame.argtypes = [HACQDESC]
    lib.Acquisition_AbortCurrentFrame.restype = UINT

    lib.Acquisition_SetCorrData.argtypes = [
        HACQDESC,
        POINTER(c_ushort),
        POINTER(DWORD),
        POINTER(DWORD),
    ]
    lib.Acquisition_SetCorrData.restype = UINT

    lib.Acquisition_SetCorrData_Ex.argtypes = [
        HACQDESC,
        POINTER(c_ushort),
        POINTER(c_ushort),
        POINTER(c_ushort),
        UINT,
        POINTER(DWORD),
        POINTER(DWORD),
    ]
    lib.Acquisition_SetCorrData_Ex.restype = UINT

    lib.Acquisition_GetCorrData.argtypes = [
        HACQDESC,
        POINTER(POINTER(c_ushort)),
        POINTER(POINTER(DWORD)),
        POINTER(POINTER(DWORD)),
    ]
    lib.Acquisition_GetCorrData.restype = UINT

    lib.Acquisition_GetCorrData_Ex.argtypes = [
        HACQDESC,
        POINTER(POINTER(c_ushort)),
        POINTER(POINTER(c_ushort)),
        POINTER(POINTER(c_ushort)),
        POINTER(POINTER(UINT)),
        POINTER(POINTER(DWORD)),
        POINTER(POINTER(DWORD)),
    ]
    lib.Acquisition_GetCorrData_Ex.restype = UINT

    lib.Acquisition_ActivateCorrectionSet.argtypes = [HACQDESC, c_uint]
    lib.Acquisition_ActivateCorrectionSet.restype = UINT

    lib.Acquisition_SetCameraGain.argtypes = [HACQDESC, WORD]
    lib.Acquisition_SetCameraGain.restype = UINT

    lib.Acquisition_SetFrameSyncTimeMode.argtypes = [HACQDESC, c_uint, c_uint]
    lib.Acquisition_SetFrameSyncTimeMode.restype = UINT

    lib.Acquisition_Acquire_GainImage_Ex_ROI.argtypes = [
        HACQDESC,
        POINTER(WORD),
        POINTER(DWORD),
        UINT,
        UINT,
        UINT,
        UINT,
        UINT,
        UINT,
        UINT,
        UINT,
        UINT,
    ]
    lib.Acquisition_Acquire_GainImage_Ex_ROI.restype = UINT

    lib.Acquisition_Acquire_Image_PreloadCorr.argtypes = [
        HACQDESC,
        UINT,
        UINT,
        UINT,
    ]
    lib.Acquisition_Acquire_Image_PreloadCorr.restype = UINT

    lib.Acquisition_Acquire_OffsetImage_PreloadCorr.argtypes = [
        HACQDESC,
        POINTER(WORD),
        UINT,
        UINT,
        UINT,
        UINT,
    ]
    lib.Acquisition_Acquire_OffsetImage_PreloadCorr.restype = UINT

    lib.Acquisition_GetHwHeader.argtypes = [HACQDESC, POINTER(c_ubyte), c_uint]
    lib.Acquisition_GetHwHeader.restype = UINT

    lib.Acquisition_Acquire_GainImage_Ex_ROI_PreloadCorr.argtypes = [
        HACQDESC,
        POINTER(DWORD),
        UINT,
        UINT,
        UINT,
        UINT,
        UINT,
        UINT,
        UINT,
        UINT,
        UINT,
    ]
    lib.Acquisition_Acquire_GainImage_Ex_ROI_PreloadCorr.restype = UINT

    lib.Acquisition_Acquire_GainImage_PreloadCorr.argtypes = [
        HACQDESC,
        POINTER(DWORD),
        UINT,
        UINT,
        UINT,
    ]
    lib.Acquisition_Acquire_GainImage_PreloadCorr.restype = UINT

    lib.Acquisition_SetCameraBinningMode.argtypes = [HACQDESC, WORD]
    lib.Acquisition_SetCameraBinningMode.restype = UINT

    lib.Acquisition_GetCameraBinningMode.argtypes = [HACQDESC, POINTER(WORD)]
    lib.Acquisition_GetCameraBinningMode.restype = UINT

    lib.Acquisition_ResetFrameCnt.argtypes = [HACQDESC]
    lib.Acquisition_ResetFrameCnt.restype = UINT

    lib.Acquisition_GetLatestFrameHeader.argtypes = [
        HACQDESC,
        POINTER(CHwHeaderInfo),
        POINTER(CHwHeaderInfoEx),
    ]
    lib.Acquisition_GetLatestFrameHeader.restype = UINT

    lib.Acquisition_GetHwHeaderInfoEx.argtypes = [
        HACQDESC,
        POINTER(CHwHeaderInfo),
        POINTER(CHwHeaderInfoEx),
    ]
    lib.Acquisition_GetHwHeaderInfoEx.restype = UINT

    lib.Acquisition_SetCameraTriggerMode.argtypes = [HACQDESC, WORD]
    lib.Acquisition_SetCameraTriggerMode.restype = UINT

    lib.Acquisition_GetCameraTriggerMode.argtypes = [HACQDESC, POINTER(WORD)]
    lib.Acquisition_GetCameraTriggerMode.restype = UINT

    lib.Acquisition_SetRotationAngle.argtypes = [HACQDESC, c_long]
    lib.Acquisition_SetRotationAngle.restype = UINT

    lib.Acquisition_GetRotationAngle.argtypes = [HACQDESC, POINTER(c_long)]
    lib.Acquisition_GetRotationAngle.restype = UINT

    lib.Acquisition_GbIF_Init.argtypes = [
        POINTER(HACQDESC),
        c_int,
        BOOL,
        UINT,
        UINT,
        BOOL,
        BOOL,
        c_long,
        POINTER(c_ubyte),
    ]
    lib.Acquisition_GbIF_Init.restype = UINT

    lib.Acquisition_GbIF_GetDeviceList.argtypes = [
        POINTER(GBIF_DEVICE_PARAM),
        c_int,
    ]
    lib.Acquisition_GbIF_GetDeviceList.restype = UINT

    lib.Acquisition_GbIF_GetDevice.argtypes = [
        POINTER(c_ubyte),
        DWORD,
        POINTER(GBIF_DEVICE_PARAM),
    ]
    lib.Acquisition_GbIF_GetDevice.restype = UINT

    lib.Acquisition_GbIF_GetDeviceCnt.argtypes = [POINTER(c_long)]
    lib.Acquisition_GbIF_GetDeviceCnt.restype = UINT

    lib.Acquisition_GbIF_SetConnectionSettings.argtypes = [
        POINTER(c_ubyte),
        c_ulong,
        POINTER(c_ubyte),
        POINTER(c_ubyte),
        POINTER(c_ubyte),
    ]
    lib.Acquisition_GbIF_SetConnectionSettings.restype = UINT

    lib.Acquisition_GbIF_GetConnectionSettings.argtypes = [
        POINTER(c_ubyte),
        POINTER(c_ulong),
        POINTER(c_ubyte),
        POINTER(c_ubyte),
        POINTER(c_ubyte),
    ]
    lib.Acquisition_GbIF_GetConnectionSettings.restype = UINT

    lib.Acquisition_GbIF_GetPacketDelay.argtypes = [HACQDESC, POINTER(c_long)]
    lib.Acquisition_GbIF_GetPacketDelay.restype = UINT

    lib.Acquisition_GbIF_SetPacketDelay.argtypes = [HACQDESC, c_long]
    lib.Acquisition_GbIF_SetPacketDelay.restype = UINT

    lib.Acquisition_GbIF_ForceIP.argtypes = [
        POINTER(c_ubyte),
        POINTER(c_ubyte),
        POINTER(c_ubyte),
        POINTER(c_ubyte),
    ]
    lib.Acquisition_GbIF_ForceIP.restype = UINT

    lib.Acquisition_GbIF_GetFilterDrvState.argtypes = [HACQDESC]
    lib.Acquisition_GbIF_GetFilterDrvState.restype = UINT

    lib.Acquisition_GbIF_CheckNetworkSpeed.argtypes = [
        HACQDESC,
        POINTER(WORD),
        POINTER(c_long),
        c_long,
    ]
    lib.Acquisition_GbIF_CheckNetworkSpeed.restype = UINT

    lib.Acquisition_GbIF_GetDetectorProperties.argtypes = [
        HACQDESC,
        POINTER(GBIF_Detector_Properties),
    ]
    lib.Acquisition_GbIF_GetDetectorProperties.restype = UINT

    lib.Acquisition_GbIF_GetDeviceParams.argtypes = [
        HACQDESC,
        POINTER(GBIF_DEVICE_PARAM),
    ]
    lib.Acquisition_GbIF_GetDeviceParams.restype = UINT

    lib.Acquisition_GbIF_GetVersion.argtypes = [
        POINTER(c_int),
        POINTER(c_int),
        POINTER(c_int),
        String,
        c_int,
    ]
    lib.Acquisition_GbIF_GetVersion.restype = UINT

    lib.Acquisition_GbIF_DiscoverDetectors.argtypes = []
    lib.Acquisition_GbIF_DiscoverDetectors.restype = UINT

    lib.Acquisition_GbIF_DiscoveredDetectorCount.argtypes = [POINTER(c_long)]
    lib.Acquisition_GbIF_DiscoveredDetectorCount.restype = UINT

    lib.Acquisition_GbIF_DiscoveredDetectorByIndex.argtypes = [
        c_long,
        POINTER(GBIF_DEVICE_PARAM),
    ]
    lib.Acquisition_GbIF_DiscoveredDetectorByIndex.restype = UINT

    lib.Acquisition_GbIF_SetDiscoveryTimeout.argtypes = [c_long]
    lib.Acquisition_GbIF_SetDiscoveryTimeout.restype = UINT

    lib.Acquisition_wpe_GetVersionNEW.argtypes = [
        POINTER(c_int),
        POINTER(c_int),
        POINTER(c_int),
        POINTER(c_int),
    ]
    lib.Acquisition_wpe_GetVersionNEW.restype = UINT

    lib.Acquisition_wpe_GetVersionEx.argtypes = [
        POINTER(c_int),
        POINTER(c_int),
        POINTER(c_int),
        String,
        c_int,
    ]
    lib.Acquisition_wpe_GetVersionEx.restype = UINT

    lib.Acq_WPE_Init.argtypes = []
    lib.Acq_WPE_Init.restype = UINT

    lib.Acquisition_wpe_ForceIP.argtypes = [
        String,
        POINTER(struct_networkConfiguration),
        c_int,
        POINTER(c_int),
    ]
    lib.Acquisition_wpe_ForceIP.restype = UINT

    lib.Acquisition_wpe_ChangeNetworkConfig.argtypes = [
        String,
        c_int,
        POINTER(struct_networkConfiguration),
    ]
    lib.Acquisition_wpe_ChangeNetworkConfig.restype = UINT

    lib.Acquisition_wpe_FillDefaultNetworkConfiguration.argtypes = [
        POINTER(struct_networkConfiguration)
    ]
    lib.Acquisition_wpe_FillDefaultNetworkConfiguration.restype = UINT

    lib.Acquisition_FTP_InitSession.argtypes = [
        HACQDESC,
        POINTER(XislFtpSession),
    ]
    lib.Acquisition_FTP_InitSession.restype = UINT

    lib.Acquisition_FTP_CloseSession.argtypes = [XislFtpSession]
    lib.Acquisition_FTP_CloseSession.restype = UINT

    lib.Acquisition_GetMissedImageCount.argtypes = [
        XislFtpSession,
        POINTER(UINT),
    ]
    lib.Acquisition_GetMissedImageCount.restype = UINT

    lib.Acquisition_OpenMissedImage.argtypes = [
        XislFtpSession,
        UINT,
        POINTER(XislFileHandle),
    ]
    lib.Acquisition_OpenMissedImage.restype = UINT

    lib.Acquisition_GetFileInfo.argtypes = [
        XislFileHandle,
        POINTER(XislFileInfo),
    ]
    lib.Acquisition_GetFileInfo.restype = UINT

    lib.Acquisition_LoadFile.argtypes = [
        XislFileHandle,
        POINTER(POINTER(c_ubyte)),
    ]
    lib.Acquisition_LoadFile.restype = UINT

    lib.Acquisition_DeleteFile.argtypes = [XislFileHandle]
    lib.Acquisition_DeleteFile.restype = UINT

    lib.Acquisition_CloseFile.argtypes = [XislFileHandle]
    lib.Acquisition_CloseFile.restype = UINT

    lib.Acq_wpe_LoadCorrectionImageToBuffer.argtypes = [
        HACQDESC,
        String,
        ProcScriptOperation,
    ]
    lib.Acq_wpe_LoadCorrectionImageToBuffer.restype = UINT

    lib.Acq_wpe_DualEnergy_LoadCorrectionImageToBuffer.argtypes = [
        HACQDESC,
        String,
        ProcScriptOperation,
    ]
    lib.Acq_wpe_DualEnergy_LoadCorrectionImageToBuffer.restype = UINT

    lib.Acquisition_AcknowledgeImage.argtypes = [HACQDESC, String]
    lib.Acquisition_AcknowledgeImage.restype = UINT

    lib.Acquisition_wpe_SetUniqueImageTag.argtypes = [HACQDESC, String]
    lib.Acquisition_wpe_SetUniqueImageTag.restype = UINT

    lib.Acquisition_Reset_OnboardOptions.argtypes = [HACQDESC]
    lib.Acquisition_Reset_OnboardOptions.restype = UINT

    lib.Acquisition_Set_OnboardOptionsPostOffset.argtypes = [
        HACQDESC,
        BOOL,
        BOOL,
        BOOL,
        BOOL,
        BOOL,
        BOOL,
        BOOL,
        BOOL,
        BOOL,
    ]
    lib.Acquisition_Set_OnboardOptionsPostOffset.restype = UINT

    lib.Acquisition_Set_OnboardOptionsPostOffsetEx.argtypes = [
        HACQDESC,
        BOOL,
        BOOL,
        BOOL,
        BOOL,
        BOOL,
        BOOL,
        BOOL,
        BOOL,
        BOOL,
        BOOL,
    ]
    lib.Acquisition_Set_OnboardOptionsPostOffsetEx.restype = UINT

    lib.Acquisition_Set_OnboardOptionsDualEnergy.argtypes = [
        HACQDESC,
        BOOL,
        BOOL,
        BOOL,
        BOOL,
        BOOL,
        BOOL,
        BOOL,
        BOOL,
        BOOL,
        BOOL,
        BOOL,
        OnboardBinningMode,
    ]
    lib.Acquisition_Set_OnboardOptionsDualEnergy.restype = UINT

    lib.Acquisition_Set_OnboardOffsetImageAcquisitionDualEnergy.argtypes = [
        HACQDESC,
        BOOL,
        BOOL,
        BOOL,
        BOOL,
    ]
    lib.Acquisition_Set_OnboardOffsetImageAcquisitionDualEnergy.restype = UINT

    lib.Acquisition_Set_OnboardAVGOptions.argtypes = [HACQDESC, BOOL, WORD]
    lib.Acquisition_Set_OnboardAVGOptions.restype = UINT

    lib.Acquisition_wpe_SetMaxOnboardCorrValue.argtypes = [
        HACQDESC,
        c_ushort,
        c_ushort,
    ]
    lib.Acquisition_wpe_SetMaxOnboardCorrValue.restype = UINT

    lib.Acquisition_Set_OnboardOffsetImageAcquisition.argtypes = [
        HACQDESC,
        BOOL,
        BOOL,
        BOOL,
    ]
    lib.Acquisition_Set_OnboardOffsetImageAcquisition.restype = UINT

    lib.Acquisition_Set_OnboardOptions.argtypes = [
        HACQDESC,
        BOOL,
        BOOL,
        BOOL,
        BOOL,
    ]
    lib.Acquisition_Set_OnboardOptions.restype = UINT

    lib.Acquisition_ActivateServiceMode.argtypes = [HACQDESC, BOOL]
    lib.Acquisition_ActivateServiceMode.restype = UINT

    lib.Acquisition_SetCameraROI.argtypes = [HACQDESC, c_ushort]
    lib.Acquisition_SetCameraROI.restype = UINT

    lib.Acquisition_GetCameraROI.argtypes = [HACQDESC, POINTER(c_ushort)]
    lib.Acquisition_GetCameraROI.restype = UINT

    lib.Acquisition_SetTriggerOutSignalOptions.argtypes = [
        HACQDESC,
        c_ushort,
        c_ushort,
        c_ushort,
        c_ushort,
        c_ushort,
        c_ushort,
        c_ushort,
        c_int,
        c_int,
    ]
    lib.Acquisition_SetTriggerOutSignalOptions.restype = UINT

    lib.Acquisition_Grabber_SetTriggerRoute.argtypes = [
        HACQDESC,
        XIS_GrabberTriggerRoute,
    ]
    lib.Acquisition_Grabber_SetTriggerRoute.restype = UINT

    lib.Acquisition_wpe_GetVersion.argtypes = [
        POINTER(c_int),
        POINTER(c_int),
        POINTER(c_int),
        POINTER(c_int),
    ]
    lib.Acquisition_wpe_GetVersion.restype = UINT

    lib.Acquisition_wpe_getAvailableSystems.argtypes = [
        POINTER(struct_discoveryReply),
        POINTER(c_int),
        c_int,
        c_int,
    ]
    lib.Acquisition_wpe_getAvailableSystems.restype = UINT

    lib.Acquisition_wpe_GetNetworkConfigs.argtypes = [
        String,
        POINTER(struct_networkConfiguration),
        POINTER(c_int),
        POINTER(c_int),
    ]
    lib.Acquisition_wpe_GetNetworkConfigs.restype = UINT

    lib.Acquisition_wpe_ActivateNetworkConfig.argtypes = [String, c_int]
    lib.Acquisition_wpe_ActivateNetworkConfig.restype = UINT

    lib.Acquisition_wpe_GetErrorCode.argtypes = []
    lib.Acquisition_wpe_GetErrorCode.restype = UINT

    lib.Acquisition_wpe_GetErrorCodeEx.argtypes = [String, c_long]
    lib.Acquisition_wpe_GetErrorCodeEx.restype = UINT

    lib.Acquisition_GetTriggerOutStatus.argtypes = [HACQDESC, POINTER(c_int)]
    lib.Acquisition_GetTriggerOutStatus.restype = UINT

    lib.Acquisition_SetCameraFOVMode.argtypes = [HACQDESC, WORD]
    lib.Acquisition_SetCameraFOVMode.restype = UINT

    lib.Acquisition_GetCameraFOVMode.argtypes = [HACQDESC, POINTER(WORD)]
    lib.Acquisition_GetCameraFOVMode.restype = UINT

    lib.Acquisition_wpe_ReadCameraRegisters.argtypes = [
        String,
        POINTER(c_ulong),
    ]
    lib.Acquisition_wpe_ReadCameraRegisters.restype = UINT

    lib.Acquisition_xrpd_ReadCameraRegisters.argtypes = [
        HACQDESC,
        POINTER(c_ulong),
    ]
    lib.Acquisition_xrpd_ReadCameraRegisters.restype = UINT

    lib.Acquisition_wpe_GetExamFlag.argtypes = [String, POINTER(c_ulong)]
    lib.Acquisition_wpe_GetExamFlag.restype = UINT

    lib.Acquisition_xrpd_GetExamFlag.argtypes = [HACQDESC, POINTER(c_ulong)]
    lib.Acquisition_xrpd_GetExamFlag.restype = UINT

    lib.Acq_wpe_SystemControl.argtypes = [String, XRpad_SystemControlEnum]
    lib.Acq_wpe_SystemControl.restype = UINT

    lib.Acq_wpe_SetImageTransferInterface.argtypes = [
        String,
        XRpad_DataInterfaceControlEnum,
    ]
    lib.Acq_wpe_SetImageTransferInterface.restype = UINT

    lib.Acq_wpe_GetSystemInformation.argtypes = [String, String, c_int]
    lib.Acq_wpe_GetSystemInformation.restype = UINT

    lib.Acquisition_GetFTPFile.argtypes = [
        String,
        String,
        POINTER(POINTER(None)),
        POINTER(c_long),
    ]
    lib.Acquisition_GetFTPFile.restype = UINT

    lib.Acquisition_FreeFTPFileBuffer.argtypes = [POINTER(None)]
    lib.Acquisition_FreeFTPFileBuffer.restype = UINT

    lib.Acquisition_SetFTPFile.argtypes = [
        String,
        String,
        POINTER(None),
        c_long,
    ]
    lib.Acquisition_SetFTPFile.restype = UINT

    lib.Acquisition_GetVersion.argtypes = [
        POINTER(c_int),
        POINTER(c_int),
        POINTER(c_int),
        POINTER(c_int),
    ]
    lib.Acquisition_GetVersion.restype = UINT

    lib.Acquisition_GetVersionString.argtypes = [String, c_size_t]
    lib.Acquisition_GetVersionString.restype = UINT

    lib.Acquisition_GetProvidedEnhancedFeatures.argtypes = [
        HACQDESC,
        POINTER(c_uint),
    ]
    lib.Acquisition_GetProvidedEnhancedFeatures.restype = UINT

    lib.Acquisition_Set_OnboardOptionPreview.argtypes = [
        HACQDESC,
        BOOL,
        BOOL,
        OnboardBinningMode,
        c_uint,
    ]
    lib.Acquisition_Set_OnboardOptionPreview.restype = UINT

    lib.Acquisition_IsPreviewImage.argtypes = [HACQDESC, POINTER(c_uint)]
    lib.Acquisition_IsPreviewImage.restype = UINT

    lib.Acquisition_SetPhototimedParams.argtypes = [
        HACQDESC,
        c_ushort,
        c_ushort,
    ]
    lib.Acquisition_SetPhototimedParams.restype = UINT

    lib.Acquisition_SetDualEnergyParams.argtypes = [
        HACQDESC,
        c_ushort,
        c_ushort,
    ]
    lib.Acquisition_SetDualEnergyParams.restype = UINT

    lib.Acquisition_SetPreshotParams.argtypes = [HACQDESC, c_ushort]
    lib.Acquisition_SetPreshotParams.restype = UINT

    lib.Acquisition_SetSequencedModeOptions.argtypes = [
        HACQDESC,
        c_ushort,
        c_ushort,
    ]
    lib.Acquisition_SetSequencedModeOptions.restype = UINT

    lib.Acquisition_EnableLogging.argtypes = [BOOL]
    lib.Acquisition_EnableLogging.restype = UINT

    lib.Acquisition_SetLogLevel.argtypes = [XislLoggingLevels]
    lib.Acquisition_SetLogLevel.restype = UINT

    lib.Acquisition_GetLogLevel.argtypes = [POINTER(XislLoggingLevels)]
    lib.Acquisition_GetLogLevel.restype = UINT

    lib.Acquisition_TogglePerformanceLogging.argtypes = [BOOL]
    lib.Acquisition_TogglePerformanceLogging.restype = UINT

    lib.Acquisition_SetLogOutput.argtypes = [String, BOOL]
    lib.Acquisition_SetLogOutput.restype = UINT

    lib.Acquisition_SetFileLogging.argtypes = [String, BOOL]
    lib.Acquisition_SetFileLogging.restype = UINT

    lib.Acquisition_SetConsoleLogging.argtypes = [BOOL]
    lib.Acquisition_SetConsoleLogging.restype = UINT

    lib.Acquisition_GetXISFileBufferSize.argtypes = [
        POINTER(c_size_t),
        UINT,
        UINT,
        UINT,
        BOOL,
        XIS_FileType,
    ]
    lib.Acquisition_GetXISFileBufferSize.restype = UINT

    lib.Acquisition_CreateOnboardPixelMaskFrom16BitPixelMask.argtypes = [
        POINTER(c_ushort),
        DWORD,
        DWORD,
        POINTER(c_ubyte),
    ]
    lib.Acquisition_CreateOnboardPixelMaskFrom16BitPixelMask.restype = UINT

    lib.Acquisition_CreateXISFileInMemory.argtypes = [
        POINTER(None),
        POINTER(None),
        UINT,
        UINT,
        UINT,
        BOOL,
        XIS_FileType,
    ]
    lib.Acquisition_CreateXISFileInMemory.restype = UINT

    lib.Acquisition_SaveFile.argtypes = [
        String,
        POINTER(None),
        UINT,
        UINT,
        UINT,
        BOOL,
        XIS_FileType,
    ]
    lib.Acquisition_SaveFile.restype = UINT

    lib.Acquisition_SaveRawData.argtypes = [String, POINTER(c_ubyte), c_size_t]
    lib.Acquisition_SaveRawData.restype = UINT

    lib.Acquisition_LoadXISFileToMemory.argtypes = [
        String,
        POINTER(None),
        c_size_t,
    ]
    lib.Acquisition_LoadXISFileToMemory.restype = UINT

    lib.Acquisition_SetDACOffsetFloorValueByMode.argtypes = [HACQDESC, c_uint]
    lib.Acquisition_SetDACOffsetFloorValueByMode.restype = UINT

    lib.Acquisition_SetDACOffsetFloorValueInFlash.argtypes = [
        HACQDESC,
        c_uint,
        WORD,
    ]
    lib.Acquisition_SetDACOffsetFloorValueInFlash.restype = UINT

    lib.Acquisition_GetDACOffsetFloorValueFromFlash.argtypes = [
        HACQDESC,
        c_uint,
        POINTER(WORD),
    ]
    lib.Acquisition_GetDACOffsetFloorValueFromFlash.restype = UINT

    lib.Acquisition_GetDetectorProperties.argtypes = [
        HACQDESC,
        POINTER(GBIF_Detector_Properties),
    ]
    lib.Acquisition_GetDetectorProperties.restype = UINT

    lib.Acquisition_SetDACoffset.argtypes = [HACQDESC, WORD]
    lib.Acquisition_SetDACoffset.restype = UINT

    lib.Acquisition_SetDACoffsetBinningFPS.argtypes = [
        HACQDESC,
        WORD,
        c_double,
        POINTER(WORD),
    ]
    lib.Acquisition_SetDACoffsetBinningFPS.restype = UINT

    lib.Acquisition_Enable_EMI_Data_Readout.argtypes = [HACQDESC, c_uint]
    lib.Acquisition_Enable_EMI_Data_Readout.restype = UINT

    lib.Acquisition_GetGridSensorStatus.argtypes = [HACQDESC, POINTER(c_uint)]
    lib.Acquisition_GetGridSensorStatus.restype = UINT

    lib.Acquisition_GetConnectionStatus.argtypes = [HACQDESC]
    lib.Acquisition_GetConnectionStatus.restype = UINT

    lib.Acquisition_Set_FPGA_Power_Mode.argtypes = [HACQDESC, c_uint]
    lib.Acquisition_Set_FPGA_Power_Mode.restype = UINT

    lib.Acquisition_SetTailTimeforTriggerMode.argtypes = [
        HACQDESC,
        c_ushort,
        XIS_DetectorTriggerMode,
    ]
    lib.Acquisition_SetTailTimeforTriggerMode.restype = UINT

    lib.Acquisition_SetEventCallback.argtypes = [
        HACQDESC,
        XIS_EventCallback,
        POINTER(None),
    ]
    lib.Acquisition_SetEventCallback.restype = UINT

    lib.Acquisition_DisableEventCallback.argtypes = [HACQDESC]
    lib.Acquisition_DisableEventCallback.restype = UINT

    lib.Acquisition_ResetOnboardShockEvent.argtypes = [HACQDESC, c_uint]
    lib.Acquisition_ResetOnboardShockEvent.restype = UINT

    lib.Acquisition_SetSDCardForceFsck.argtypes = [HACQDESC]
    lib.Acquisition_SetSDCardForceFsck.restype = UINT

    lib.Acquisition_AckSDCardForceFsck.argtypes = [HACQDESC]
    lib.Acquisition_AckSDCardForceFsck.restype = UINT

    lib.Acquisition_AckSDCardForceFsckError.argtypes = [HACQDESC]
    lib.Acquisition_AckSDCardForceFsckError.restype = UINT

    lib.Acquisition_GetSDCardInfo.argtypes = [
        HACQDESC,
        POINTER(c_uint),
        POINTER(c_uint),
    ]
    lib.Acquisition_GetSDCardInfo.restype = UINT

    lib.Acquisition_SetFakeTemperature.argtypes = [HACQDESC, BOOL, c_int]
    lib.Acquisition_SetFakeTemperature.restype = UINT

    lib.Acquisition_IdentifyDevice.argtypes = [HACQDESC]
    lib.Acquisition_IdentifyDevice.restype = UINT

    lib.Acquisition_Resend_All_Messages.argtypes = [HACQDESC]
    lib.Acquisition_Resend_All_Messages.restype = UINT

    lib.Acquisition_GetLocation.argtypes = [HACQDESC, POINTER(c_uint)]
    lib.Acquisition_GetLocation.restype = UINT

    lib.Acquisition_GetNetwork.argtypes = [HACQDESC, POINTER(c_uint)]
    lib.Acquisition_GetNetwork.restype = UINT

    lib.Acquisition_GetNetworkSpeed.argtypes = [HACQDESC, POINTER(c_uint)]
    lib.Acquisition_GetNetworkSpeed.restype = UINT

    lib.Acquisition_SetNetworkSpeed.argtypes = [HACQDESC, c_uint]
    lib.Acquisition_SetNetworkSpeed.restype = UINT

    lib.Acquisition_SetIdleTimeout.argtypes = [HACQDESC, c_ushort]
    lib.Acquisition_SetIdleTimeout.restype = UINT

    lib.Acquisition_SetChargeMode.argtypes = [HACQDESC, c_ubyte]
    lib.Acquisition_SetChargeMode.restype = UINT

    lib.Acquisition_VerifyGenuineness.argtypes = [
        HACQDESC,
        POINTER(c_char * int(128)),
        POINTER(c_size_t),
        POINTER(c_ubyte * int(20)),
    ]
    lib.Acquisition_VerifyGenuineness.restype = UINT

    lib.Acquisition_SetPrivateKey.argtypes = [
        HACQDESC,
        POINTER(c_ubyte * int(64)),
        POINTER(c_ubyte * int(64)),
    ]
    lib.Acquisition_SetPrivateKey.restype = UINT

    lib.Acquisition_SetTemperatureTimeout.argtypes = [HACQDESC, c_ushort]
    lib.Acquisition_SetTemperatureTimeout.restype = UINT

    lib.Acquisition_ResetTemperatureTimeout.argtypes = [HACQDESC]
    lib.Acquisition_ResetTemperatureTimeout.restype = UINT

    lib.Acquisition_SetTemperatureThresholds.argtypes = [
        HACQDESC,
        c_uint,
        c_uint,
    ]
    lib.Acquisition_SetTemperatureThresholds.restype = UINT

    lib.Acquisition_GetTemperatureThresholds.argtypes = [
        HACQDESC,
        POINTER(c_uint),
        POINTER(c_uint),
    ]
    lib.Acquisition_GetTemperatureThresholds.restype = UINT

    lib.Acquisition_GetTemperature.argtypes = [
        HACQDESC,
        POINTER(c_uint * int(8)),
    ]
    lib.Acquisition_GetTemperature.restype = UINT

    lib.Acquisition_GetBatteryStatus.argtypes = [
        HACQDESC,
        POINTER(XRpad_BatteryStatus),
    ]
    lib.Acquisition_GetBatteryStatus.restype = UINT

    lib.Acquisition_Get_Current_Voltage.argtypes = [
        HACQDESC,
        POINTER(DETECTOR_CURRENT_VOLTAGE),
    ]
    lib.Acquisition_Get_Current_Voltage.restype = UINT

    lib.Acquisition_CreateFakeShockWarningLevel.argtypes = [HACQDESC]
    lib.Acquisition_CreateFakeShockWarningLevel.restype = UINT

    lib.Acquisition_CreateFakeShockCriticalLevel.argtypes = [HACQDESC]
    lib.Acquisition_CreateFakeShockCriticalLevel.restype = UINT

    lib.Acquisition_FactoryResetShock.argtypes = [HACQDESC]
    lib.Acquisition_FactoryResetShock.restype = UINT

    lib.Acquisition_SetSystemTime.argtypes = [HACQDESC, String]
    lib.Acquisition_SetSystemTime.restype = UINT

    lib.Acquisition_GetPowerstate.argtypes = [HACQDESC, POINTER(c_uint)]
    lib.Acquisition_GetPowerstate.restype = UINT

    lib.Acquisition_GetAutoPowerOnLocations.argtypes = [
        HACQDESC,
        POINTER(c_uint),
    ]
    lib.Acquisition_GetAutoPowerOnLocations.restype = UINT

    lib.Acquisition_SetAutoPowerOnLocations.argtypes = [HACQDESC, c_uint]
    lib.Acquisition_SetAutoPowerOnLocations.restype = UINT

    lib.Acquisition_GetChargeMode.argtypes = [
        HACQDESC,
        POINTER(c_ubyte),
        POINTER(c_ubyte),
    ]
    lib.Acquisition_GetChargeMode.restype = UINT

    lib.Acquisition_SetSDCardTimeout.argtypes = [HACQDESC, c_ushort]
    lib.Acquisition_SetSDCardTimeout.restype = UINT

    lib.Acquisition_GetSDCardTimeout.argtypes = [HACQDESC, POINTER(c_ushort)]
    lib.Acquisition_GetSDCardTimeout.restype = UINT

    lib.Acquisition_GetVersionInfo.argtypes = [
        HACQDESC,
        POINTER(XRpad_VersionInfo),
    ]
    lib.Acquisition_GetVersionInfo.restype = UINT

    lib.Acquisition_GetIpAdress.argtypes = [HACQDESC, POINTER(POINTER(c_char))]
    lib.Acquisition_GetIpAdress.restype = UINT

    lib.Acquisition_Test_SDCardPerformance.argtypes = [
        HACQDESC,
        c_uint,
        POINTER(c_double),
        POINTER(c_uint),
        POINTER(c_double),
        POINTER(c_uint),
    ]
    lib.Acquisition_Test_SDCardPerformance.restype = UINT

    lib.Acquisition_Enable_TestPattern.argtypes = [HACQDESC, c_uint]
    lib.Acquisition_Enable_TestPattern.restype = UINT

    lib.Acquisition_GetWLAN_CountryCode.argtypes = [HACQDESC, String]
    lib.Acquisition_GetWLAN_CountryCode.restype = UINT

    lib.Acquisition_SetWLAN_CountryCode.argtypes = [HACQDESC, String]
    lib.Acquisition_SetWLAN_CountryCode.restype = UINT

    lib.Acquisition_GetWLAN_ChannelList.argtypes = [HACQDESC, String, c_size_t]
    lib.Acquisition_GetWLAN_ChannelList.restype = UINT

    lib.Acquisition_DisableSyslogSaving.argtypes = [HACQDESC]
    lib.Acquisition_DisableSyslogSaving.restype = UINT

    lib.Acquisition_SetAEDOptions.argtypes = [
        HACQDESC,
        c_ushort,
        c_ushort,
        c_ushort,
    ]
    lib.Acquisition_SetAEDOptions.restype = UINT

    lib.Acquisition_GetAutoDeepSleepIdleLocations.argtypes = [
        HACQDESC,
        POINTER(c_uint),
        POINTER(c_uint),
    ]
    lib.Acquisition_GetAutoDeepSleepIdleLocations.restype = UINT

    lib.Acquisition_SetAutoDeepSleepIdleLocations.argtypes = [
        HACQDESC,
        c_uint,
        c_uint,
    ]
    lib.Acquisition_SetAutoDeepSleepIdleLocations.restype = UINT

    lib.Acquisition_GbIF_SetTransmissionMode.argtypes = [
        HACQDESC,
        XIS_Transmission_Mode,
    ]
    lib.Acquisition_GbIF_SetTransmissionMode.restype = UINT

    lib.Acquisition_GbIF_GetTransmissionMode.argtypes = [
        HACQDESC,
        POINTER(XIS_Transmission_Mode),
    ]
    lib.Acquisition_GbIF_GetTransmissionMode.restype = UINT

    lib.Acquisition_SetDefaultBootConfiguration.argtypes = [HACQDESC, c_int]
    lib.Acquisition_SetDefaultBootConfiguration.restype = UINT

    lib.Acquisition_GetDefaultBootConfiguration.argtypes = [
        HACQDESC,
        POINTER(c_int),
    ]
    lib.Acquisition_GetDefaultBootConfiguration.restype = UINT

    lib.Acquisition_xrpd_GetDetectorType.argtypes = [
        HACQDESC,
        String,
        c_size_t,
    ]
    lib.Acquisition_xrpd_GetDetectorType.restype = UINT

    lib.Acquisition_GetNrOfImagesInIntermetiateBuff.argtypes = [
        HACQDESC,
        POINTER(UINT),
    ]
    lib.Acquisition_GetNrOfImagesInIntermetiateBuff.restype = UINT

    lib.Acquisition_SetNrOfImagesInIntermetiateBuff.argtypes = [HACQDESC, UINT]
    lib.Acquisition_SetNrOfImagesInIntermetiateBuff.restype = UINT

    lib.Acquisition_ResetNrOfImagesInIntermetiateBuff.argtypes = [HACQDESC]
    lib.Acquisition_ResetNrOfImagesInIntermetiateBuff.restype = UINT


BOOL = c_int
WORD = c_ushort
DWORD = c_uint
DWORD = c_uint
CHAR = c_char
UINT = c_uint


class struct_anon_31(Structure):
    pass


struct_anon_31.__slots__ = [
    'ucMacAddress',
    'ucIP',
    'ucSubnetMask',
    'ucGateway',
    'ucAdapterIP',
    'ucAdapterMask',
    'dwIPCurrentBootOptions',
    'cManufacturerName',
    'cModelName',
    'cGBIFFirmwareVersion',
    'cDeviceName',
]

struct_anon_31._fields_ = [
    ('ucMacAddress', c_ubyte * int(16)),
    ('ucIP', c_ubyte * int(16)),
    ('ucSubnetMask', c_ubyte * int(16)),
    ('ucGateway', c_ubyte * int(16)),
    ('ucAdapterIP', c_ubyte * int(16)),
    ('ucAdapterMask', c_ubyte * int(16)),
    ('dwIPCurrentBootOptions', DWORD),
    ('cManufacturerName', CHAR * int(32)),
    ('cModelName', CHAR * int(32)),
    ('cGBIFFirmwareVersion', CHAR * int(32)),
    ('cDeviceName', CHAR * int(16)),
]


GBIF_DEVICE_PARAM = struct_anon_31


class struct_anon_32(Structure):
    pass


struct_anon_32.__slots__ = [
    'cDetectorType',
    'cManufacturingDate',
    'cPlaceOfManufacture',
    'cUniqueDeviceIdentifier',
    'cDeviceIdentifier',
    'cDummy',
]

struct_anon_32._fields_ = [
    ('cDetectorType', c_char * int(32)),
    ('cManufacturingDate', c_char * int(8)),
    ('cPlaceOfManufacture', c_char * int(8)),
    ('cUniqueDeviceIdentifier', c_char * int(16)),
    ('cDeviceIdentifier', c_char * int(16)),
    ('cDummy', c_char * int(48)),
]


GBIF_Detector_Properties = struct_anon_32


class struct_anon_33(Structure):
    pass


struct_anon_33.__slots__ = [
    'dwPROMID',
    'dwHeaderID',
    'bAddRow',
    'bPwrSave',
    'dwNrRows',
    'dwNrColumns',
    'dwZoomULRow',
    'dwZoomULColumn',
    'dwZoomBRRow',
    'dwZoomBRColumn',
    'dwFrmNrRows',
    'dwFrmRowType',
    'dwFrmFillRowIntervalls',
    'dwNrOfFillingRows',
    'dwDataType',
    'dwDataSorting',
    'dwTiming',
    'dwAcqMode',
    'dwGain',
    'dwOffset',
    'dwAccess',
    'bSyncMode',
    'dwBias',
    'dwLeakRows',
]

struct_anon_33._fields_ = [
    ('dwPROMID', DWORD),
    ('dwHeaderID', DWORD),
    ('bAddRow', BOOL),
    ('bPwrSave', BOOL),
    ('dwNrRows', DWORD),
    ('dwNrColumns', DWORD),
    ('dwZoomULRow', DWORD),
    ('dwZoomULColumn', DWORD),
    ('dwZoomBRRow', DWORD),
    ('dwZoomBRColumn', DWORD),
    ('dwFrmNrRows', DWORD),
    ('dwFrmRowType', DWORD),
    ('dwFrmFillRowIntervalls', DWORD),
    ('dwNrOfFillingRows', DWORD),
    ('dwDataType', DWORD),
    ('dwDataSorting', DWORD),
    ('dwTiming', DWORD),
    ('dwAcqMode', DWORD),
    ('dwGain', DWORD),
    ('dwOffset', DWORD),
    ('dwAccess', DWORD),
    ('bSyncMode', BOOL),
    ('dwBias', DWORD),
    ('dwLeakRows', DWORD),
]


CHwHeaderInfo = struct_anon_33


class struct_anon_34(Structure):
    pass


struct_anon_34.__slots__ = [
    'wHeaderID',
    'wPROMID',
    'wResolutionX',
    'wResolutionY',
    'wNrRows',
    'wNrColumns',
    'wZoomULRow',
    'wZoomULColumn',
    'wZoomBRRow',
    'wZoomBRColumn',
    'wFrmNrRows',
    'wFrmRowType',
    'wRowTime',
    'wClock',
    'wDataSorting',
    'wTiming',
    'wGain',
    'wLeakRows',
    'wAccess',
    'wBias',
    'wUgComp',
    'wCameratype',
    'wFrameCnt',
    'wBinningMode',
    'wRealInttime_milliSec',
    'wRealInttime_microSec',
    'wStatus',
    'wCommand1',
    'wCommand2',
    'wCommand3',
    'wCommand4',
    'wDummy',
]

struct_anon_34._fields_ = [
    ('wHeaderID', WORD),
    ('wPROMID', WORD),
    ('wResolutionX', WORD),
    ('wResolutionY', WORD),
    ('wNrRows', WORD),
    ('wNrColumns', WORD),
    ('wZoomULRow', WORD),
    ('wZoomULColumn', WORD),
    ('wZoomBRRow', WORD),
    ('wZoomBRColumn', WORD),
    ('wFrmNrRows', WORD),
    ('wFrmRowType', WORD),
    ('wRowTime', WORD),
    ('wClock', WORD),
    ('wDataSorting', WORD),
    ('wTiming', WORD),
    ('wGain', WORD),
    ('wLeakRows', WORD),
    ('wAccess', WORD),
    ('wBias', WORD),
    ('wUgComp', WORD),
    ('wCameratype', WORD),
    ('wFrameCnt', WORD),
    ('wBinningMode', WORD),
    ('wRealInttime_milliSec', WORD),
    ('wRealInttime_microSec', WORD),
    ('wStatus', WORD),
    ('wCommand1', WORD),
    ('wCommand2', WORD),
    ('wCommand3', WORD),
    ('wCommand4', WORD),
    ('wDummy', WORD),
]


CHwHeaderInfoEx = struct_anon_34


class struct_anon_38(Structure):
    pass


struct_anon_38.__slots__ = [
    'wTiming',
    'wValue0',
    'wValue1',
    'wValue2',
    'wValue3',
    'wValue4',
    'wValue5',
    'wValue6',
]

struct_anon_38._fields_ = [
    ('wTiming', c_ubyte),
    ('wValue0', c_ubyte),
    ('wValue1', c_ubyte),
    ('wValue2', c_ubyte),
    ('wValue3', c_ubyte),
    ('wValue4', c_ubyte),
    ('wValue5', c_ubyte),
    ('wValue6', c_ubyte),
]


FPGAType = struct_anon_38


class struct_DETECTOR_CURRENT_VOLTAGE(Structure):
    pass


struct_DETECTOR_CURRENT_VOLTAGE.__slots__ = [
    'iV1',
    'imA1',
    'iV2',
    'imA2',
    'iV3',
    'imA3',
]

struct_DETECTOR_CURRENT_VOLTAGE._fields_ = [
    ('iV1', c_int),
    ('imA1', c_int),
    ('iV2', c_int),
    ('imA2', c_int),
    ('iV3', c_int),
    ('imA3', c_int),
]


DETECTOR_CURRENT_VOLTAGE = struct_DETECTOR_CURRENT_VOLTAGE
enum_anon_39 = c_int
XRpad_SystemControlEnum = enum_anon_39
enum_XRpad_ChargeMode = c_int
XRpad_ChargeMode = enum_XRpad_ChargeMode
enum_XRpad_BatteryPresence = c_int
XRpad_BatteryPresence = enum_XRpad_BatteryPresence


class struct_XRpad_BatteryStatus(Structure):
    pass


struct_XRpad_BatteryStatus.__slots__ = [
    'presence',
    'design_capacity',
    'remaining_capacity',
    'charge_state',
    'charge_mode',
    'cycle_count',
    'temperature',
    'authenticated',
    'health',
]

struct_XRpad_BatteryStatus._fields_ = [
    ('presence', XRpad_BatteryPresence),
    ('design_capacity', c_int),
    ('remaining_capacity', c_int),
    ('charge_state', c_int),
    ('charge_mode', XRpad_ChargeMode),
    ('cycle_count', c_int),
    ('temperature', c_int),
    ('authenticated', c_int),
    ('health', c_int),
]


XRpad_BatteryStatus = struct_XRpad_BatteryStatus


class struct_XRpad_VersionInfo(Structure):
    pass


struct_XRpad_VersionInfo.__slots__ = [
    'subversion',
    'linux_kernel',
    'software',
    'hwdriver',
    'zynq_firmware',
    'spartan_firmware',
    'msp_firmware',
    'pld_firmware',
    'xrpd',
    'wlan',
]

struct_XRpad_VersionInfo._fields_ = [
    ('subversion', c_char * int(256)),
    ('linux_kernel', c_char * int(32)),
    ('software', c_char * int(32)),
    ('hwdriver', c_char * int(32)),
    ('zynq_firmware', c_char * int(32)),
    ('spartan_firmware', c_char * int(32)),
    ('msp_firmware', c_char * int(32)),
    ('pld_firmware', c_char * int(32)),
    ('xrpd', c_char * int(32)),
    ('wlan', c_char * int(32)),
]


XRpad_VersionInfo = struct_XRpad_VersionInfo
enum_XRpad_DataInterfaceControlEnum = c_int
XRpad_DataInterfaceControlEnum = enum_XRpad_DataInterfaceControlEnum
enum_anon_40 = c_int
XislLoggingLevels = enum_anon_40
XislFtpSession = POINTER(None)
XislFileHandle = POINTER(None)
enum_XislFileEntryType = c_int
XislFileEntryType = enum_XislFileEntryType


class struct_XislFileInfo(Structure):
    pass


struct_XislFileInfo.__slots__ = [
    'filename',
    'directory',
    'address',
    'filesize',
    'type',
    'timestamp',
]

struct_XislFileInfo._fields_ = [
    ('filename', String),
    ('directory', String),
    ('address', String),
    ('filesize', c_size_t),
    ('type', XislFileEntryType),
    ('timestamp', String),
]


XislFileInfo = struct_XislFileInfo
enum_ProcScriptOperation = c_int
ProcScriptOperation = enum_ProcScriptOperation
enum_OnboardBinningMode = c_int
OnboardBinningMode = enum_OnboardBinningMode
enum_XIS_DetectorTriggerMode = c_int
XIS_DetectorTriggerMode = enum_XIS_DetectorTriggerMode
enum_XIS_FileType = c_int
XIS_FileType = enum_XIS_FileType
enum_XIS_Event = c_int
XIS_Event = enum_XIS_Event
enum_XIS_GrabberTriggerRoute = c_int
XIS_GrabberTriggerRoute = enum_XIS_GrabberTriggerRoute
XIS_EventCallback = CFUNCTYPE(
    UNCHECKED(None), XIS_Event, UINT, UINT, POINTER(None), POINTER(None)
)
enum_XIS_Init_Flags = c_int
XIS_Init_Flags = enum_XIS_Init_Flags
enum_XIS_Transmission_Mode = c_int
XIS_Transmission_Mode = enum_XIS_Transmission_Mode


class struct_deviceInfo(Structure):
    pass


struct_deviceInfo.__slots__ = [
    'device_version',
    'spec_version',
    'manufacturer_name',
    'model_name',
    'serial_number',
    'manufacturer_specific',
    'user_name',
]

struct_deviceInfo._fields_ = [
    ('device_version', c_char * int(16)),
    ('spec_version', c_char * int(16)),
    ('manufacturer_name', c_char * int(32)),
    ('model_name', c_char * int(32)),
    ('serial_number', c_char * int(16)),
    ('manufacturer_specific', c_char * int(48)),
    ('user_name', c_char * int(16)),
]


class struct_networkInfo(Structure):
    pass


struct_networkInfo.__slots__ = [
    'ip',
    'mask',
    'broadcast',
    'mac',
]

struct_networkInfo._fields_ = [
    ('ip', c_char * int(16)),
    ('mask', c_char * int(16)),
    ('broadcast', c_char * int(16)),
    ('mac', c_char * int(18)),
]


class struct_discoveryReply(Structure):
    pass


struct_discoveryReply.__slots__ = [
    'deviceInfo',
    'lanInfo',
    'wlanInfo',
    'gvcp_ip',
]

struct_discoveryReply._fields_ = [
    ('deviceInfo', struct_deviceInfo),
    ('lanInfo', struct_networkInfo),
    ('wlanInfo', struct_networkInfo),
    ('gvcp_ip', c_char * int(16)),
]


class struct_networkAdapterConfiguration(Structure):
    pass


struct_networkAdapterConfiguration.__slots__ = [
    'enabled',
    'hw_accel',
    'bridged',
    'ifname',
    'ipaddr',
    'netmask',
    'proto',
    'dns',
    'gateway',
    'macaddr',
    'not_used',
]

struct_networkAdapterConfiguration._fields_ = [
    ('enabled', c_int),
    ('hw_accel', c_int),
    ('bridged', c_int),
    ('ifname', c_char * int(16)),
    ('ipaddr', c_char * int(16)),
    ('netmask', c_char * int(16)),
    ('proto', c_char * int(16)),
    ('dns', c_char * int(16)),
    ('gateway', c_char * int(16)),
    ('macaddr', c_char * int(18)),
    ('not_used', c_char * int(110)),
]


class struct_wifiConfigurationEx(Structure):
    pass


struct_wifiConfigurationEx.__slots__ = [
    'mode',
    'agmode',
    'channel',
    'ssid',
    'description',
    'passphrase',
    'scan_ssid',
]

struct_wifiConfigurationEx._fields_ = [
    ('mode', c_char * int(32)),
    ('agmode', c_char * int(32)),
    ('channel', c_int),
    ('ssid', c_char * int(64)),
    ('description', c_char * int(64)),
    ('passphrase', c_char * int(68)),
    ('scan_ssid', c_int),
]


class struct_networkConfiguration(Structure):
    pass


struct_networkConfiguration.__slots__ = [
    'path',
    'name',
    'hostname',
    'readonly',
    'sshd_enabled',
    'gbif_enabled',
    'lan',
    'wlan',
    'wifi',
    'notUsed',
]

struct_networkConfiguration._fields_ = [
    ('path', c_char * int(128)),
    ('name', c_char * int(80)),
    ('hostname', c_char * int(80)),
    ('readonly', c_int),
    ('sshd_enabled', c_int),
    ('gbif_enabled', c_int),
    ('lan', struct_networkAdapterConfiguration),
    ('wlan', struct_networkAdapterConfiguration),
    ('wifi', struct_wifiConfigurationEx),
    ('notUsed', c_char * int(184)),
]


DETECTOR_CURRENT_VOLTAGE = struct_DETECTOR_CURRENT_VOLTAGE
XRpad_BatteryStatus = struct_XRpad_BatteryStatus
XRpad_VersionInfo = struct_XRpad_VersionInfo
XislFileInfo = struct_XislFileInfo
